1
00:00:00,000 --> 00:00:00,890


2
00:00:00,890 --> 00:00:05,360
PROFESSOR: I'm going to show you now how
to read characters from the user input.

3
00:00:05,360 --> 00:00:08,000
Suppose I wanted the user
to enter a character,

4
00:00:08,000 --> 00:00:10,070
and then store it in a variable.

5
00:00:10,070 --> 00:00:12,800
And the variable is
named letter. Then I need

6
00:00:12,800 --> 00:00:15,620
a variable of type character.

7
00:00:15,620 --> 00:00:17,780
And let's call it letter.

8
00:00:17,780 --> 00:00:22,730
Next, I should probably tell
the user to enter a letter.

9
00:00:22,730 --> 00:00:25,340


10
00:00:25,340 --> 00:00:28,590
And then I can read what
they enter using scanf.

11
00:00:28,590 --> 00:00:32,710
The format specifier for
a letter is a percent c,

12
00:00:32,710 --> 00:00:35,570
as we already know from
using the printf function.

13
00:00:35,570 --> 00:00:39,190
And in order to store this letter
that was read from the keyboard,

14
00:00:39,190 --> 00:00:42,250
from the user input,
I need to specify here

15
00:00:42,250 --> 00:00:45,610
with an ampersand and variable,
in which it's going to be stored.

16
00:00:45,610 --> 00:00:49,600
Again, I need that ampersand
character, just as I did for numbers.

17
00:00:49,600 --> 00:00:52,070
Now I should also verify
that everything went fine.

18
00:00:52,070 --> 00:00:59,230
So I print letter percent c, just to
verify that everything went fine.

19
00:00:59,230 --> 00:01:01,600
And it's letter that I read.

20
00:01:01,600 --> 00:01:05,044
Let's compile and run this.

21
00:01:05,044 --> 00:01:05,960
Please enter a letter.

22
00:01:05,960 --> 00:01:09,990
Let's enter a. I read the
letter a. So everything's good.

23
00:01:09,990 --> 00:01:15,140
In fact, I can even use multiple percent
c's and one scanf statement.

24
00:01:15,140 --> 00:01:18,080
Suppose I want the user
to enter two letters--

25
00:01:18,080 --> 00:01:19,340
letter2.

26
00:01:19,340 --> 00:01:23,950
So please enter two letters.

27
00:01:23,950 --> 00:01:27,070
And I would put a second
percent c right there.

28
00:01:27,070 --> 00:01:30,950
And it's letter, and letter2.

29
00:01:30,950 --> 00:01:32,390
And then I read the letter.

30
00:01:32,390 --> 00:01:34,950
I should really print them both out--

31
00:01:34,950 --> 00:01:38,825
percent c, letter and letter2.

32
00:01:38,825 --> 00:01:41,840
And I can compile this, and run.

33
00:01:41,840 --> 00:01:46,720
Please enter two letters: a, b. I
read the letters a and b. Perfect.

34
00:01:46,720 --> 00:01:50,800
Now notice, I did not put a
space between my two letters.

35
00:01:50,800 --> 00:01:55,550
Characters behave differently from
numbers in the scanf function.

36
00:01:55,550 --> 00:01:59,450
Scanf, when dealing with numbers,
automatically skipped whitespace.

37
00:01:59,450 --> 00:02:03,410
And I could put in as many spaces
between numbers as I wanted to.

38
00:02:03,410 --> 00:02:04,890
That is not true for characters.

39
00:02:04,890 --> 00:02:08,430
A space would be considered
just another character.

40
00:02:08,430 --> 00:02:10,220
Let me demonstrate that to you.

41
00:02:10,220 --> 00:02:15,320
If I run this program again, and put a
space between my two characters here,

42
00:02:15,320 --> 00:02:20,097
then it says I read the
letters a and space.

43
00:02:20,097 --> 00:02:21,680
Because that's the space that it read.

44
00:02:21,680 --> 00:02:23,430
It didn't read the b.
It didn't get there.

45
00:02:23,430 --> 00:02:25,180
I didn't ask it to
read a third letter.

46
00:02:25,180 --> 00:02:27,660
So that's the characters a and space.

47
00:02:27,660 --> 00:02:32,364
So if I actually wanted the user to
separate their letters by a space,

48
00:02:32,364 --> 00:02:34,530
I would have to first of
all tell them that-- please

49
00:02:34,530 --> 00:02:39,530
enter two letters separated by a space.

50
00:02:39,530 --> 00:02:42,740
And then I would have to put that
space right here in that format string,

51
00:02:42,740 --> 00:02:44,540
in the scanf function.

52
00:02:44,540 --> 00:02:47,750
That way would indicate
to C that I first

53
00:02:47,750 --> 00:02:52,580
want the user to enter a character, then
a space, and then another character.

54
00:02:52,580 --> 00:02:53,930
Let's give this a try.

55
00:02:53,930 --> 00:02:55,970
I compile, and I run.

56
00:02:55,970 --> 00:02:58,100
These are the two letters
separated by a space--

57
00:02:58,100 --> 00:03:01,640
a space b. Right now, it actually works.

58
00:03:01,640 --> 00:03:04,040
Similarly, if I didn't want
them to have a space there,

59
00:03:04,040 --> 00:03:08,264
but I want them separated by a
comma, I can do that as well.

60
00:03:08,264 --> 00:03:10,430
And then I'd need to similarly
put that

61
00:03:10,430 --> 00:03:12,630
right here in the format string.

62
00:03:12,630 --> 00:03:17,810
So now I'm expecting the user
to enter a character, a comma,

63
00:03:17,810 --> 00:03:19,340
and another character.

64
00:03:19,340 --> 00:03:22,100
Let's compile and run.

65
00:03:22,100 --> 00:03:27,100
Now I enter a comma b. No space--
that space will be an extra character.

66
00:03:27,100 --> 00:03:30,800
And indeed, I read the
letters a and b. Typically,

67
00:03:30,800 --> 00:03:35,360
you just read one character at
a time, or specify exactly how

68
00:03:35,360 --> 00:03:36,830
you wanted the user to enter those.

69
00:03:36,830 --> 00:03:40,540
So now you know how to read
characters from the user input.